{"version":3,"sources":["components/App.js","components/Scoreboard.js","components/Card.js","helpers/shuffle.js","components/GameBoard.js","helpers/useShowThenHide.js","components/Notification.js","reportWebVitals.js","index.js"],"names":["App","useState","notificationText","setNotificationText","numCards","setNumCards","correctCards","useRef","isFading","score","hiScore","scores","setScores","useEffect","restart","loadHiScore","Number","parseInt","localStorage","getItem","current","clearText","setTextThenClear","text","clearTimeout","setImmediate","bind","setTimeout","onCardClicked","id","includes","incrementScore","length","setItem","className","header","cardClicked","time","message","Scoreboard","props","Card","onClick","e","preventDefault","shuffle","array","randomIndex","currentIndex","Math","floor","random","GameBoard","displayedCards","setCards","cards","i","push","c","useShowThenHide","isCurrent","node","ref","style","transition","opacity","Notification","divRef","border","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63539a76.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport '../styles/App.css';\nimport Notification from './Notification';\nimport GameBoard from './GameBoard';\nimport Scoreboard from './Scoreboard';\n\nfunction App() {\n  const [notificationText, setNotificationText] = useState('');\n  const [numCards, setNumCards] = useState();\n  const correctCards = useRef();\n  const isFading = useRef(null);\n  const notificationMilliseconds = 5000;\n  const [scores, setScores] = useState({ score: 0, hiScore: 0 });\n  useEffect(() => {\n    restart();\n    loadHiScore();\n  }, []); // restart (start?) at start (restart?)\n\n  const loadHiScore = () => {\n    const hiScore = Number.parseInt(localStorage.getItem('hiScore'));\n    if (hiScore) {\n      setScores((scores) => {\n        scores.hiScore = hiScore;\n        return scores;\n      });\n    }\n  };\n\n  const restart = () => {\n    // could possibly be called start\n    // but i guess in one form or another\n    // it is restarting because it's been\n    // started once before in this world\n    setNumCards(4);\n    correctCards.current = [];\n    setScores((scores) => {\n      return { score: 0, hiScore: scores.hiScore };\n    });\n  };\n\n  const lose = () => {\n    // lose the game. it restarts??\n    // but not before letting the player know they lost\n    setTextThenClear(\n      'You lost the game. It has restarted. Try to beat your high score!'\n    );\n    restart();\n  };\n\n  const levelUp = () => {\n    // win the game. it levels up??\n    setNumCards((numCards) => numCards + 2); // level up\n    correctCards.current = []; // restart the 'game'\n    setTextThenClear('You won this level. You have moved to the next level.');\n    // notify player\n  };\n\n  const clearText = () => {\n    isFading.current = null;\n    setNotificationText('');\n  };\n\n  const setTextThenClear = (text) => {\n    if (isFading.current) clearTimeout(isFading.current);\n    setNotificationText('');\n    setImmediate(setNotificationText.bind(this, text));\n    isFading.current = setTimeout(clearText, notificationMilliseconds);\n  };\n\n  const onCardClicked = (id) => {\n    setTextThenClear(id + \" was clicked. You didn't lose the game, yet!\");\n\n    if (correctCards.current.includes(id)) return lose();\n\n    incrementScore();\n    if (correctCards.current.length + 1 === numCards) {\n      levelUp();\n    } else {\n      correctCards.current = [...correctCards.current, id];\n    }\n  };\n\n  const incrementScore = () => {\n    setScores((scores) => {\n      if (scores.score === scores.hiScore) {\n        localStorage.setItem('hiScore', scores.hiScore + 1);\n        return { score: scores.score + 1, hiScore: scores.hiScore + 1 };\n      }\n      return { score: scores.score + 1, hiScore: scores.hiScore };\n    });\n  };\n\n  return (\n    <div className='app'>\n      <Scoreboard\n        score={scores.score}\n        hiScore={scores.hiScore}\n        header={'Memory Card'}\n      />\n      <GameBoard cardClicked={(id) => onCardClicked(id)} numCards={numCards} />\n      <Notification\n        time={notificationMilliseconds}\n        message={notificationText}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import '../styles/Scoreboard.css';\n\nconst Scoreboard = (props) => {\n  return (\n    <div className='scoreboard'>\n      <span className='score'>Score: {props.score}</span>\n      <span className='header'>{props.header}</span>\n      <span className='hiScore'>Hi Score: {props.hiScore}</span>\n    </div>\n  );\n};\n\nexport default Scoreboard;\n","import '../styles/Card.css';\n\nconst Card = (props) => {\n  return (\n    <div\n      className='card'\n      onClick={(e) => {\n        e.preventDefault();\n        props.cardClicked();\n      }}\n    >\n      <span>{props.id}</span>\n    </div>\n  );\n};\n\nexport default Card;\n","export default function shuffle(array) {\n  // taken from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  var currentIndex = array.length,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex--;\n\n    [array[currentIndex], array[randomIndex]] = [\n      array[randomIndex],\n      array[currentIndex],\n    ];\n  }\n\n  return array;\n}\n","import { useEffect, useState } from 'react';\nimport Card from './Card';\nimport shuffle from '../helpers/shuffle';\nimport '../styles/GameBoard.css';\n\nconst GameBoard = (props) => {\n  const { numCards, cardClicked } = props;\n  let [displayedCards, setCards] = useState([]);\n\n  useEffect(() => {\n    let cards = [];\n    for (let i = 0; i < numCards; i++) {\n      cards.push(\n        <Card\n          key={i}\n          cardClicked={() => {\n            setCards((c) => shuffle([...c]));\n            cardClicked(i);\n          }}\n          id={i}\n        />\n      );\n    }\n\n    cards = shuffle(cards);\n    setCards(cards);\n  }, [numCards, cardClicked]);\n\n  return <div className='gameBoard'>{displayedCards}</div>;\n};\n\nexport default GameBoard;\n","import { useEffect, useRef } from 'react';\n\nconst useShowThenHide = (props) => {\n  let isCurrent = useRef(true);\n  useEffect(() => {\n    isCurrent.current = true;\n    const node = props.ref.current;\n\n    node.style.transition = '0s opacity';\n    node.style.opacity = 1;\n    setTimeout(() => {\n      node.style.transition = `${props.time / 1000}s opacity`;\n      node.style.opacity = 0;\n    }, 100);\n\n    return () => {\n      isCurrent.current = false;\n    };\n  }, [props.message, props.ref, props.time]);\n};\n\nexport default useShowThenHide;\n","import React, { useRef } from 'react';\nimport useShowThenHide from '../helpers/useShowThenHide';\nimport '../styles/Notification.css';\n\nconst Notification = (props) => {\n  const divRef = useRef();\n  useShowThenHide({ ref: divRef, time: props.time, message: props.message });\n  const border = props.message ? '1' : '0';\n\n  return (\n    <div\n      ref={divRef}\n      className='notification'\n      style={{ border: border + 'px solid black' }}\n    >\n      {props.message}\n    </div>\n  );\n};\n\nexport default Notification;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}